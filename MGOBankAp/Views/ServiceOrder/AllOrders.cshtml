@using MGOBankApp.Domain.Entity
@using MGOBankApp.Domain.Enum
@using MGOBankApp.ViewModels
@using Microsoft.AspNetCore.Identity
@model TicketWindowViewModel
@inject UserManager<AppUser> userManager


@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}


<style type="text/css">
    import url('https://fonts.googleapis.com/css?family=Oswald');
    * {
        margin: 0;
        padding: 0;
        border: 0;
        box-sizing: border-box
    }

    body {
        background-color: #ebebeb;
        font-family: arial;

    }

    .fl-left {
        float: left
    }

    .fl-right {
        float: right
    }

    h1 {
        text-transform: uppercase;
        font-weight: 900;
        border-left: 10px solid #fec500;
        padding-left: 10px;
        margin-bottom: 30px
    }

    .row {
        overflow: hidden
    }

    .card {
        display: table-row;
        width: 90%;
        background-color: #fff;
        color: #989898;
        margin-bottom: 10px;
        font-family: 'Oswald', sans-serif;
        text-transform: uppercase;
        border-radius: 10px;
        position: relative;
        margin-left: auto;
        margin-right: auto;
    }

        .card + .card {
            margin-left: 2%
        }

    .date {
        display: table-cell;
        width: 25%;
        position: relative;
        text-align: center;
        border-right: 2px dashed #ebebeb
    }

        .date:before,
        .date:after {
            content: "";
            display: block;
            width: 30px;
            height: 30px;
            background-color: #ebebeb;
            position: absolute;
            top: -15px;
            right: -15px;
            z-index: 1;
            border-radius: 50%
        }

        .date:after {
            top: auto;
            bottom: -15px
        }

        .date time {
            display: block;
            position: absolute;
            top: 50%;
            left: 50%;
            -webkit-transform: translate(-50%, -50%);
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%)
        }

            .date time span {
                display: block
            }

                .date time span:first-child {
                    color: #2b2b2b;
                    font-weight: 600;
                    font-size: 250%
                }

                .date time span:last-child {
                    text-transform: uppercase;
                    font-weight: 600;
                    margin-top: -10px
                }

    .card-cont {
        display: table-cell;
        width: 75%;
        font-size: 85%;
        padding: 10px 10px 30px 50px
    }

        .card-cont h3 {
            color: #3C3C3C;
            font-size: 130%
        }



        .card-cont > div {
            display: table-row
        }

        .card-cont .even-date i,
        .card-cont .even-info i,
        .card-cont .even-date time,
        .card-cont .even-info p {
            display: table-cell
        }

        .card-cont .even-date i,
        .card-cont .even-info i {
            padding: 5% 5% 0 0
        }

        .card-cont .even-info p {
            padding: 30px 50px 0 0
        }

        .card-cont .even-date time span {
            display: block
        }

        .card-cont button {
            border: none;
            display: block;
            width: 80px;
            height: 30px;
            text-transform: uppercase;
            background-color: #F8504C;
            color: #fff;
            text-align: center;
            line-height: 30px;
            border-radius: 5px;
            position: absolute;
            right: 10px;
            bottom: 10px
        }

    .row:last-child .card:first-child .card-cont a {
        background-color: #037FDD
    }

    .row:last-child .card:last-child .card-cont a {
        background-color: #F8504C
    }

    media screen and (max-width: 860px) {
        .card

    {
        display: block;
        float: none;
        width: 100%;
        margin-bottom: 10px
    }

    .card + .card {
        margin-left: 0
    }

    .card-cont .even-date,
    .card-cont .even-info {
        font-size: 75%
    }

    }
    /* site main */
    .sitemain {
        display: flex;
        margin-top:15px;
    }

    .main-child1 {
        width: 78%;
    }

    .main-child2 {
        width: 20%;
    }

    .table-wrapper {
        margin: 10px 70px 70px;
    }
    /* for table */
    .fl-table {
        border-radius: 15px;
        font-size: 12px;
        font-weight: normal;
        border: none;
        border-collapse: collapse;
        width: auto;
        max-width: 100%;
        white-space: nowrap;
        background-color: white;
       
    }

        .fl-table td, .fl-table th {
            text-align: center;
            padding: 8px;
        }

        .fl-table td {
            border-right: 1px solid #f8f8f8;
            font-size: 12px;
        }

        .fl-table thead th {
            color: #ffffff;
            background: #4FC3A1;
        }


            .fl-table thead th:nth-child(odd) {
                width:75%;
                color: #ffffff;
                background: #324960;
            }

        .fl-table tr:nth-child(even) {
            background: #F8F8F8;
            width: 25%;
        }

    /* Responsive */

    media (max-width: 767px) {
        .fl-table

    {
        display: block;
        width: 100%;
    }

    .table-wrapper:before {
        content: "Scroll horizontally >";
        display: block;
        text-align: right;
        font-size: 11px;
        color: white;
        padding: 0 0 10px;
    }

    .fl-table thead, .fl-table tbody, .fl-table thead th {
        display: block;
    }

        .fl-table thead th:last-child {
            border-bottom: none;
        }

    .fl-table thead {
        float: left;
        
    }

    .fl-table tbody {
        width: auto;
        position: relative;
        overflow-x: auto;
    }

    .fl-table td, .fl-table th {
        padding: 20px .625em .625em .625em;
        height: 60px;
        vertical-align: middle;
        box-sizing: border-box;
        overflow-x: hidden;
        overflow-y: auto;
        width: 120px;
        font-size: 13px;
        text-overflow: ellipsis;
    }

    .fl-table thead th {
        text-align: left;
        border-bottom: 1px solid #f7f7f9;
    }

    .fl-table tbody tr {
        display: table-cell;
    }

        .fl-table tbody tr:nth-child(odd) {
            background: none;
            width:75%;
        }

    .fl-table tr:nth-child(even) {
        background: transparent;
        width: 25%;
    }

    .fl-table tr td:nth-child(odd) {
        background: #F8F8F8;
        width: 75%;
        border-right: 1px solid #E6E4E4;
    }

    .fl-table tr td:nth-child(even) {
        border-right: 1px solid #E6E4E4;
        width: 25%;
    }

    .fl-table tbody td {
        display: block;
        text-align: center;
    }

    }

    .secondul {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #ebebeb;
        display:flex;
        justify-content: space-around;
    }

    .secondul li {
       justify-content:space-around;
    }

    .secondul li button {
            display: block;
            color: white;
            background-color: #4FC3A1;
            border-radius:16px;
            text-align: center;
            border:none;
            padding: 14px 16px;
            text-decoration: none;
                font: 300 18px/18px Roboto, sans-serif;
        }

                .secondul li button:hover {
                    transition:0.45s;
                    background-color: #34826b;
            }
</style>
@{
    string WhatTheMonth(int Month)
    {
        switch (Month)
        {
            case 1:
                return "JANUARY";
            case 2:
                return "FEBRUARY";
            case 3:
                return "MARCH";
            case 4:
                return "APRIL";
            case 5:
                return "MAY";
            case 6:
                return "JUNE";
            case 7:
                return "JULY";
            case 8:
                return "AUGUST";
            case 9:
                return "SEPTEMBER";
            case 10:
                return "OCTOBER";
            case 11:
                return "NOVEMBER";
            case 12:
                return "DECEMBER";


            default:
                return "Month";

        }
    }
    string SetOrderServiceType(Services service)
    {
        string type = ""; // A,B,C
        switch (service.ToString())
        {
            case "Bill":
                type = "A";
                break;
            case "Tax":
                type = "B";
                break;
            case "Credit":
                type = "C";
                break;
        }
        return type;
    }
    AppUser currentUser = await userManager.GetUserAsync(User);

}

<ul class="secondul">
    <li>
        <form asp-action="AddBillService" asp-controller="ServiceOrder">
            <button type="submit">Order Bill Service</button>
        </form>
    </li>
    <li>
        <form asp-action="AddTaxService" asp-controller="ServiceOrder">
            <button type="submit">Order Tax Service</button>
        </form>
    </li>
    <li>
        <form asp-action="AddCreditService" asp-controller="ServiceOrder">
            <button type="submit">Order Credit Service</button>
        </form>
    </li>
</ul>

<div class="sitemain">
    <div class="main-child1">



        @{if (Model.AllOrders.Count() != 0)
        {
        
            @foreach (var order in Model.AllOrders)
            {
                <div class="row">
                    <article class="card fl-left">
                        <section class="date">
                            <time datetime="23th feb">
                                <span>@order.OrderDate.Day</span><span>@WhatTheMonth(@order.OrderDate.Month).Substring(0, 3)</span>
                            </time>
                        </section>
                        <section class="card-cont">
                            <small>@order.OrderService.ToString()</small>
                            <h3>@SetOrderServiceType(@order.OrderService)@order.OrderNumber</h3>
                            <div class="even-date">
                                <i class="fa fa-calendar"></i>
                                <time>
                                    <span> @order.OrderDate.DayOfWeek @order.OrderDate.Day @WhatTheMonth(@order.OrderDate.Month) @order.OrderDate.Year</span>
                                    <span>@order.OrderDate.ToShortTimeString() to @order.OrderDate.AddMinutes(4).ToShortTimeString()</span>
                                </time>
                            </div>
                            <div class="even-info">
                                <i class="fa fa-map-marker"></i>
                                <p>
                                    @order.AppUser.FullName, thanks for waiting
                                </p>
                            </div>
                            <form asp-action="DeleteTicket" asp-controller="ServiceOrder" asp-route-id="@order.OrderTicketId">
                                <button type="submit">DELETE</button>
                            </form>
                        </section>
                    </article>
                </div>
                }
            }
            else
            {
                <style>
                .main-child1{
                    height:500px;
                    width:78%;
                    margin-right:auto;
                    margin-left:auto;
                    border:1px solid grey;
                    border-radius:15px;
                    display:flex;
                    align-items:center;
                    justify-content:center;
                }
                </style>
                <h2 class="no-tickets-text">Tickets will be here</h2>
            }
           }
            </div>
    <div class="main-child2">

        <table class="fl-table">
            <thead>
                <tr>
                    <th>Client Name</th>
                    <th>Ticket</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int limit = Model.AllUsersOrders.Count;
                    var orders = Model.AllUsersOrders;
                }
                @if(Model.AllUsersOrders.Count!=0){
                @for(int i = 0; i < 10; i++)
                {
                        @if (i < limit)
                        {
                            <tr>

                        <td>@orders[i].AppUser.FullName</td>
                        <td>@SetOrderServiceType(@orders[i].OrderService)@orders[i].OrderNumber</td>
                    </tr>
                    }
                }
                }
            <tbody>
        </table>
    </div>
</div>

<script>
    setTimeout(function () {
        window.location.reload(1);
    }, 240000); //change 240000 after changing the seconds in OrderTicketUpdateService class
</script>